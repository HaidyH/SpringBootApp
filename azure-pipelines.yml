
trigger:
- dev

# pool:
#   vmImage: ubuntu-latest

stages:
- stage: Lint
  displayName: 'Lint Stage'
  jobs:
  - job: Lint
    displayName: 'Linting'
    steps:
    - script: |
        npm run lint
      displayName: 'Run Linting'

- stage: UnitTest
  displayName: 'Unit Test Stage'
  jobs:
  - job: UnitTest
    displayName: 'Unit Testing'
    steps:
    - script: |
      echo "unit test"
        npm test
      displayName: 'Run Unit Tests'

- stage: SonarQube
  displayName: 'SonarQube Stage'
  jobs:
  - job: SonarQube
    displayName: 'Static Code Analysis'
    steps:
    - script: |
        sonar-scanner
      displayName: 'Run SonarQube Analysis'

- stage: BuildImage
  displayName: 'Build Image Stage'
  jobs:
  - job: BuildImage
    displayName: 'Building Image'
    steps:
    - script: |
        docker build -t spring-boot-app .
      displayName: 'Build Image'

- stage: PushImage
  displayName: 'Push Image to Registry'
  jobs:
  - job: PushImage
    displayName: 'Pushing Image to Registry'
    steps:
    - script: |
        docker tag  spring-boot-app haidy/spring-boot-app:latest
        docker push haidyh/spring-boot-app:latest
      displayName: 'Push Image'

- stage: PullImage
  displayName: 'Pull Image from Registry'
  jobs:
  - job: PullImage
    displayName: 'Pulling Image from Registry'
    steps:
    - script: |
        docker pull haidyh/spring-boot-app:latest
      displayName: 'Pull Image'

- stage: DeployApp
  displayName: 'Deploy Spring Boot App'
  jobs:
  - job: DeployApp
    displayName: 'Deploying App to K8s Cluster'
    steps:
    - script: |
      kubectl apply -f k8/deployment.yaml
    displayName: 'Deploy App'

- stage: CreateIngress
  displayName: 'Create Ingress'
  jobs:
  - job: CreateIngress
    displayName: 'Creating Ingress for the App'
    steps:
    - script: |
        kubectl apply -f k8/svc.yaml
        kubectl apply -f k8/ingress.yaml
      displayName: 'Create Ingress'

- stage: DeployDev
  displayName: 'Deploy on Development Environment'
  jobs:
  - job: DeployDev
    displayName: 'Deploying to Development Environment'
    steps:
    - script: |
        kubectl apply -f dev-deployment.yaml
      displayName: 'Deploy to Development'

- stage: DeployProd
  displayName: 'Deploy on Production Environment'
  jobs:
  - job: DeployProd
    displayName: 'Deploying to Production Environment'
    steps:
    - script: |
        kubectl apply -f prod-deployment.yaml
      displayName: 'Deploy to Production'